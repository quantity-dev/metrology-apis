[project]
authors = [{ name = "quantity-dev contributors" }]
name = "metrology-apis"
requires-python = ">= 3.13"
version = "0.0.1.dev0"
dependencies = ["optype"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]


[tool.pixi.workspace]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]
preview = ["pixi-build"]

[tool.pixi.dependencies]
# TODO(lucascolley): uncomment when prefix-dev/pixi#4523 is merged
# metrology-apis = { path = "." }
optype = ">=0.13.4,<0.14"

[tool.pixi.feature.lint.dependencies]
taplo = ">=0.10.0,<0.11"
ruff = ">=0.13.0,<0.14"
mdformat = ">=0.7.22,<0.8"
mdformat-ruff = ">=0.1.3,<0.2"
basedpyright = ">=1.31.4,<2"
basedmypy = ">=2.10.0,<3"
numpydoc = ">=1.9.0,<2"
lefthook = ">=1.12.4,<2"

[tool.pixi.feature.lint.tasks]
hooks = { cmd = "lefthook install", description = "Install pre-commit hooks" }
lefthook = { cmd = "lefthook", description = "Run lefthook" }
lint = { cmd = "lefthook run pre-commit --all-files --force", description = "Run all linters" }
mdformat = { cmd = "mdformat", description = "Format markdown with mdformat" }
mypy = { cmd = "mypy", description = "Type check with mypy" }
numpydoc = { cmd = "numpydoc lint", description = "Validate docstrings with numpydoc" }
pre-commit = { cmd = "lefthook run pre-commit", description = "Run pre-commit checks" }
pyright = { cmd = "basedpyright", description = "Type check with basedpyright" }
ruff-check = { cmd = "ruff check --fix --exit-non-zero-on-fix --force-exclude", description = "Lint with ruff" }
ruff-format = { cmd = "ruff format --exit-non-zero-on-format --force-exclude", description = "Format with ruff" }
taplo = { cmd = "taplo fmt", description = "Format TOML with taplo" }

[tool.pixi.environments]
lint = ["lint"]


[tool.pixi.package.build.backend]
name = "pixi-build-python"
version = "*"

[tool.pixi.package.host-dependencies]
hatchling = "==1.27.0"
python = ">=3.13"


[tool.mypy]
files = ["src"]
python_version = "3.13"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "truthy-bool"]
disable_error_code = ["explicit-any", "decorated-any"]


[tool.basedpyright]
include = ["src"]
pythonVersion = "3.13"
pythonPlatform = "All"
typeCheckingMode = "all"
reportExplicitAny = false


[tool.numpydoc_validation]
checks = [
  "all",  # report on all checks, except the below
  "EX01", # most docstrings do not need an example
  "SA01", # most docstrings do not need a 'see also' section
  "ES01", # most docstrings do not need an extended summary
  "GL08", # TODO: add docstrings to all items
]
